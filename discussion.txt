Discussão sobre soluções de software, desafios e sugestões.
Nesta breve sessão é possível encontrar em mais detalhes quais foram os problemas específicos que levaram o desenvolvimento a um hiato, bem como as soluções tomadas de caráter imediato e as sugestões consideradas plausíveis para resolver tais problemas.

1. Interface gráfica em Windows
  O primeiro problema enfrentado no desenvolvimento da solução do Redu Offline foi como prover uma interface gráfica que pudesse ao mesmo tempo ser funcional e manter o padrão de qualidade do Redu Online. Como foi decidido que a aplicação seria desenvolvida para Windows Desktop, o leque de opções de tecnologia para a GUI acabaram se tornando limitadas.

  Haveria a opção de fazer uma aplicação completamente baseada em tecnologia web, para funcionar nos navegadores, mas utilizando-se de comunicação com dados off-line hospedados na máquina do usuário. Essa opção poderia trazer a maior similaridade possível ao Redu Offline, pois poder-se-ia trabalhar com CSS, HTML e JS que provêm uma variedade e liberdade de expressão que não podem ser encontradas em aplicações Windows, além de possuir uma vasta comunidade de desenvolvedores para ajudar a superar desafios. Contudo, essa alternativa encontrou-se problemática na hora de tentar lidar com o comportamento do navegador quando se depara com a falta de conexão. Entre momentos de turbulência na conexão, o usuário poderia enfrentar frequentemente páginas de erro como falta de conexão ou página não encontrada.

  Uma segunda alternativa seria tentar fazer uma interface híbrida que utilizasse ao mesmo tempo um browser próprio com conteúdo HTML e a tecnologia de interface de formulários Windows (WPF). Uma versão híbrida usando ambas as tecnologias teria de maneira resumida, dois painéis principais, um painel online com arquitetura, design e estrutura web (HTML, CSS e JS), enquanto o painel off-line seria montado a partir de componentes nativos dos formulários Windows e possivelmente componentes complexos criados de acordo com a necessidade. Essa estratégia apesar de primeiramente parecer inteligente, mostrou-se incabível porque o componente de navegador de WPF não é atualizado com frequência, de tal forma que ele não pode ser considerado um navegador compatível com todas as tecnologias web necessárias para fazer uma interface de aplicativo web completamente funcional. Além disso, trocar constantemente entre a interface off-line e online deveria ter uma transição sutil para prover uma melhor experiência de usuário. A troca constante de uma interface web para uma interface montada a partir de componentes poderia se mostrar brusca e causar confusão quanto à forma de executar algumas funcionalidades chaves do Redu.

  Por fim, a solução tomada foi a construção de uma interface baseada em componentes WPF para poder ter uma interface instável e prover uma melhor experiência de usuário. Vários componentes customizados foram criados para manter o look-and-feel da interface online. Esses componentes tentam imitar a interface web criando painéis que usam como plano de fundo imagens provenientes do Redu online. O conjunto de painéis, sobrepostos uns aos outros permite criar sessões distintas da interface e que funcionam como se fossem objetos clicáveis com os quais é possível interagir.

2. Segurança de dados
  Normalmente quando os dados de um usuário em uma rede social são armazenados apenas na nuvem e uma das razões principais é a segurança. Os servidores das redes sociais normalmente possuem protocolos de segurança que garante a privacidade e a proteção dos dados. Não apenas os servidores, mas a própria internet com protocolos de segurança durante as transações de dados ajudam a manter o usuário seguro. Contudo quando falamos em manter dados off-line localmente em uma máquina, essa discussão se leva a um outro nível, pois o próprio programa não pode mais confiar nos benefícios da nuvem e deve assegurar por si mesmo a privacidade dos dados.

  No Redu off-line os dados do usuário são guardados localmente para permitir a possibilidade de se trabalhar enquanto não houver conexão. Como discutido durante este documento, a forma escolhida de persistir os dados foi através de uma hierarquia de documentos XML, principalmente por sua simplicidade e portabilidade. No entanto, ao utilizar apenas documentos XML, encontramo-nos desprovidos de mecanismos para assegurar a privacidade dos dados.

  Primeiramente, os arquivos XML de cada usuário são salvos juntos aos dados de instalação da aplicação, logo qualquer pessoa que tiver acesso ao computador poderia acessar os dados. Tão fácil quanto encontrar os dados, seria alterá-los, pois qualquer editor de texto é capaz de editar e salvar arquivos do tipo XML. Além disso, seria fácil copiar os dados e se apropriar das informações dos usuários.

  A aplicação atualmente lida com transações seguras quando há uma conexão permanente no computador e como o Redu utiliza o protocolo de autenticação OAuth, não há necessidade de salvar senhas localmente. Contudo os conteúdos de publicações e mensagens trocadas entre os usuários ainda continuam desprotegidos. A sugestão seria criptografar todo e qualquer dado que for salvo em XML pela aplicação, mas por razões de prazo este processo não foi efetuado. Como o código está disponibilizado em licença de código livre, fica registrada a sugestão dessa solução para o problema de segurança.

3. Sincronização e consistência dos dados

  A sincronização e a consistência dos dados são juntos o maior problema a ser resolvido pelo Redu off-line. Qualquer peça de software que tiver como obrigação lidar com persistência de dados deve encontrar uma maneira de resolver esse problema, contudo no caso da aplicação desenvolvida neste projeto esse problema toma dimensões maiores pois os dados devem ser salvos não apenas em um lugar, mas ao mesmo tempo no mínimo em dois: localmente e na nuvem. Como consequência de persistir dados em mais de um lugar, é necessário criar um mecanismo de sincronização para manter os dados em ambos lugares sempre consistentes e atualizados.

  O primeiro problema que podemos tratar é a direção do servidor para a máquina local. Esse é o caso mais simples de sincronização e consistência, pois cabe à aplicação inicialmente fazer o download de uma quantidade predeterminada de dados do usuário e cada vez que o usuário utilizar a aplicação na sua forma online, ou seja, havendo internet, essa deve solicitar os novos dados e salvá-los em seus devidos lugares, assim como atualizá-los os excluí-los quando necessário for. No caso da API do Redu, não é possível requisitar apenas uma lista de dados modificados, sempre é necessário pedir uma lista inteira de dados do usuário e cabe à aplicação off-line decidir o que foi modificado. Como a primeira versão do Redu off-line é focada no caráter das relações interpessoais, ou seja, nas publicações nos murais, não é necessário verificar se um comentário ou publicação foi modificada, pois tal possibilidade não existe, então cabe à aplicação apenas conferir se uma publicação foi deletada.

  O segundo caso, a direção da máquina local para o servidor, também é trivial no caso onde há conexão com a internet. Tudo que a aplicação deve fazer para assegurar a sincronia dos dados é enviar novas publicações para o servidor e em caso de sucesso salvá-las em seus devidos lugares. Contudo como a aplicação deve funcionar em caso de ausência de internet, é necessário tratar o problema de o que fazer quando uma publicação for feita quando o usuário não estiver conectado. A solução proposta pela primeira versão do Redu off-line é de criar um objeto chamado PendingActivity para representar uma ação realizada quando não havia internet. Por exemplo quando uma publicação no mural do aluno é feita off-line, essa publicação é salva normalmente porém com uma flag indicando que ela precisa ser sincronizada, além disso um objeto do tipo mencionado é criado e também salvo em um arquivo XML à parte. Quando a aplicação identifica que há novamente conexão, ela lê o arquivo XML que contém as atividades pendentes, realiza uma por uma e atualiza a flag das publicações como finalmente sincronizadas.

  No entanto essa solução encontra um problema nas políticas de segurança da API do Redu. A requisição HTTP POST necessária para enviar uma nova publicação não permite a submissão de uma data/hora como parâmetro para a criação de uma nova publicação no servidor. Quando a requisição é enviada, o servidor grava a publicação com a data/hora automática do seu próprio relógio. Este é um mecanismo comum entre as APIs para garantir a consistência dos dados dentro de si mesma. Porém essa política acaba ferindo a consistência dos dados nas duas aplicações ao mesmo tempo. Primeiramente porque na versão off-line haverá uma data/hora, enquanto na versão online haverá uma data/hora diferente. E em segundo lugar porque é possível ocorrer casos onde a ordem dos dados seria perdida na aplicação online.

  Imagine, por exemplo, que o usuário Felipe postou a seguinte frase em seu mural “Na natureza toda a energia se transforma” às 09:10 enquanto havia internet, ou seja, esta publicação foi submetida ao servidor, mas logo após a internet na sua escola cai. Então 10 minutos depois Felipe resolve responder sua própria publicação e escreve “Meu professor de Biologia disse isso hoje”. Na sua máquina, essa publicação será salva com a hora de 09:20, porém como não havia internet, ela ainda não foi sincronizada. Às 10:30, Cláudio, amigo de Felipe lê a publicação e resolve comentar dizendo “Que legal, cara!”. No servidor a mensagem será salva logo após a primeira mensagem de Felipe. Mais tarde naquele mesmo dia, às 12:30, a internet na escola de Felipe volta a funcionar e a sua aplicação resolve sincronizar os dados. Na máquina de Felipe constará a seguinte ordem de mensagens:

Felipe diz: “Na natureza toda a energia se transforma” (09:10).
	Felipe responde “Meu professor de Biologia disse isso hoje” (09:20).
	Cláudio responde “Que legal, cara!” (10:30).

Contudo quando Cláudio for acessar o Redu mais uma vez e vir a publicação de Felipe, a ordem que ele verá será a seguinte:

Felipe diz: “Na natureza toda a energia se transforma” (09:10).
	Cláudio responde “Que legal, cara!” (10:30).
	Felipe responde “Meu professor de Biologia disse isso hoje” (12:30).

  Essa ordem não corresponde à real ordem de acontecimentos dos fatos e pode causar grandes problemas de consistência dos dados. A solução tomada inicialmente para resolver esse problema é de marcar as mensagens publicadas off-line com uma tag para avisar que a sua ordem pode estar alterada, mas isso não resolve de fato o problema, essa solução apenas indica ao usuário que algo pode estar errado e espera que não haja grandes aborrecimentos.

  Uma sugestão para solucionar esse problema seria fazer com que quando houvesse uma sincronização, a aplicação off-line fizesse o download de todas as mensagens, ordenasse-as localmente, apagasse as antigas no servidos e as submetesse novamente com a ordem correta. Essa solução faria com que o servidor tivesse a ordem correta dos dados, porém as data/hora erradas. Essa seria uma solução aceitável, mas como a API utiliza o protocolo OAuth para autorizar transações, seria impossível para a aplicação off-line apagar as mensagens no servidor de um usuário que ela não tivesse a autorização. Portanto esse problema continua aberto a sugestões.

4. Conteúdo multimídia das aulas
  Apesar de o foco principal dessa versão do Redu off-line é o sistema de publicações, ou seja, a colaboração e a comunicação assíncronas, é importante discutir um pouco sobre o conteúdo multimídia das aulas. Esse tópico seria trivial se estivéssemos lidando com uma aplicação no browser, pois lá é muito fácil de consumir conteúdos como arquivos PDF, vídeos do Youtube e outras formas de conteúdo multimídia. Entretanto como estamos falando de uma aplicação Windows desktop, a situação é diferente. Nesse tipo de aplicação não é possível rodar de forma nativa uma grande parte do conteúdo multimídia, exceto por imagens e texto. A maneira mais correta de fazer isso seria fazer uso de aplicativos de terceiros para ler o conteúdo que não é possível ler por si mesmo.

  Por exemplo, em caso de arquivos como .DOC, .PDF, vídeos e áudio hospedados diretamente no Redu, seria possível indexá-los nos arquivos XML de suas respectivas aulas e na interface gráfica ter um link para abrir o Windows Explorer e então o usuário poderia abrir o arquivo diretamente. Essa abordagem possui dois problemas. O primeiro é relativo à experiência do usuário. Levar o usuário para fora da sua aplicação com o objetivo de poder realizar alguma atividade quebra a linearidade das ações e dispersa a sua atenção para mais de um lugar ao mesmo tempo. O segundo problema é em relação à compatibilidade dos arquivo e à disponibilidade de software para lê-los. É possível acontecer o problema onde a máquina do usuário não teria o software necessário para ler um determinado arquivo, não o permitindo dessa forma acesso ao conteúdo. Esse problema pode ser resolvido em partes usando plug-ins e códigos de terceiros para permitir que os arquivos possam ser lidos por componentes customizados dentro da própria aplicação. Contudo é necessário fazer atenção às licenças de código pois nem sempre elas são abertas e elas podem não ser compatíveis com a licença escolhida para a distribuição do Redu off-line.

  Posteriormente há o problema de vídeos do Youtube e outros serviços de streaming de vídeo. Não há uma forma legal de fazer o download desses vídeos para disponibilizá-los off-line, então a única solução viável seria redirecionar o usuário para o respectivo site do vídeo no navegador, porém apenas quando houver conexão. Isso, no entanto, não impediria que os usuários publicassem comentários sobre o vídeo quando não houver conexão, então o espaço de discussão ainda estaria disponível.

5. Portabilidade da aplicação
  Um ponto discutido desde o início do projeto do Redu off-line é a possibilidade de transformar a rede social não apenas em uma ferramenta off-line, mas também permitir aos usuários levá-la consigo para qualquer lugar e poder utilizá-la em qualquer computador, independentemente de haver conexão com a internet ou não. A ideia inicial era de desenvolver a aplicação de tal maneira que ela possa ser guardada em um pen drive e que possa ser executada em qualquer máquina que rode Windows.

  Foi visando solucionar este desafio que foi decidido usar tecnologias Windows para o desenvolvimento da aplicação, ao invés de Java ou qualquer outra tecnologia que exija uma máquina virtual ou algum interpretador que podem talvez não se encontrar no computador que o usuário deseje usar. Aplicações WPF, utilizam em sua maioria componentes que estão presentes no próprio núcleo do sistema operacional.

  Desta forma, para a execução da aplicação seria apenas necessário armazenar em um pen drive o arquivo executável do Redu off-line e as suas possíveis dependências em forma de arquivos .dll. Fora isso, a escolha de armazenar os dados do usuário em arquivos XML permite portá-los igualmente em um dispositivo de armazenamento como o pen drive.

  O uso de tecnologias Windows para desenvolver a aplicação induz a necessidade de usar computadores com tal sistema operacional para fazer o uso da aplicação. Contudo há uma possível tendência das escolas públicas de investirem em máquinas com sistemas operacionais baseados em Linux por questões de gastos financeiros. Esse problema pode ser contornado e a aplicação poderia ser executada em ambiente Linux de algumas maneiras.

  Primeiramente, a solução mais custosa seria traduzir a aplicação para uma aplicação Java, que é por sua natureza multiplataforma. Essa solução envolvo alguns problemas e vantagens. Como Java e C# possuem uma similaridade semântica e sintática, a tradução de códigos backend se daria de maneira bastante trivial, porém não se pode dizer o mesmo quando a tradução de códigos frontend, pois nesse caso os paradigmas utilizados na construção de interfaces gráficas em Java são bastante diferentes daqueles adotados por aplicações Windows Forms. Como citado anteriormente, o uso de Java também obrigaria a máquina a possuir a máquina virtual Java para compilação e interpretação de código. As máquinas baseadas em Linux tendem a vir com a máquina virtual já instalada, mas nem sempre é o caso. Os sistemas baseados em Linux não são amigáveis quanto à instalação de novos programas e uma pessoa sem muita experiência pode sofrer dificuldades.

  Outra solução possível é a utilização de uma máquina virtual que rode Windows em uma máquina Linux. Tais máquinas são capazes de similar a 100% uma máquina real Windows e o uso da aplicação seria o mesmo comparado a um computador com o sistema operacional Windows. Entretanto a instalação de uma máquina virtual não é um procedimento trivial e para leigos esse processo poderia ser bastante custoso e complicado. 

  Finalmente, os desenvolvedores do Redu Off-line poderiam portar a aplicação Windows para sistemas Linux e MacOS utilizando ferramentas de terceiros capazes de fazer esse porte. Um exemplo é a tecnologia Mono da Novell. Um artigo, em inglês, que discute esse procedimento pode ser encontrado em http://www.codeguru.com/csharp/article.php/c17655/Porting-a-Windows-Forms-C-Application-to-Mac-OS-X-and-Linux.htm. Desta maneira a carga de esforço para fazer o porte ficaria na mão dos desenvolvedores e não dos usuários finais da aplicação.
 
